/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BLS {
  export type PointG2Struct = {
    x: [BigNumberish, BigNumberish];
    y: [BigNumberish, BigNumberish];
  };

  export type PointG2StructOutput = [
    x: [bigint, bigint],
    y: [bigint, bigint]
  ] & { x: [bigint, bigint]; y: [bigint, bigint] };
}

export declare namespace TypesLib {
  export type CiphertextStruct = {
    u: BLS.PointG2Struct;
    v: BytesLike;
    w: BytesLike;
  };

  export type CiphertextStructOutput = [
    u: BLS.PointG2StructOutput,
    v: string,
    w: string
  ] & { u: BLS.PointG2StructOutput; v: string; w: string };
}

export interface MockBlocklockStringReceiverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blocklock"
      | "createTimelockRequest"
      | "encrytpedValue"
      | "plainTextValue"
      | "receiveBlocklock"
      | "requestId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "blocklock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createTimelockRequest",
    values: [BigNumberish, TypesLib.CiphertextStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encrytpedValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "plainTextValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBlocklock",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "requestId", values?: undefined): string;

  decodeFunctionResult(functionFragment: "blocklock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTimelockRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encrytpedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "plainTextValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveBlocklock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestId", data: BytesLike): Result;
}

export interface MockBlocklockStringReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): MockBlocklockStringReceiver;
  waitForDeployment(): Promise<this>;

  interface: MockBlocklockStringReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blocklock: TypedContractMethod<[], [string], "view">;

  createTimelockRequest: TypedContractMethod<
    [
      decryptionBlockNumber: BigNumberish,
      encryptedData: TypesLib.CiphertextStruct
    ],
    [bigint],
    "nonpayable"
  >;

  encrytpedValue: TypedContractMethod<
    [],
    [
      [BLS.PointG2StructOutput, string, string] & {
        u: BLS.PointG2StructOutput;
        v: string;
        w: string;
      }
    ],
    "view"
  >;

  plainTextValue: TypedContractMethod<[], [string], "view">;

  receiveBlocklock: TypedContractMethod<
    [requestID: BigNumberish, decryptionKey: BytesLike],
    [void],
    "nonpayable"
  >;

  requestId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blocklock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createTimelockRequest"
  ): TypedContractMethod<
    [
      decryptionBlockNumber: BigNumberish,
      encryptedData: TypesLib.CiphertextStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encrytpedValue"
  ): TypedContractMethod<
    [],
    [
      [BLS.PointG2StructOutput, string, string] & {
        u: BLS.PointG2StructOutput;
        v: string;
        w: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "plainTextValue"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveBlocklock"
  ): TypedContractMethod<
    [requestID: BigNumberish, decryptionKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestId"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
