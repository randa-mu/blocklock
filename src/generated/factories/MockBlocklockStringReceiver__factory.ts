/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockBlocklockStringReceiver,
  MockBlocklockStringReceiverInterface,
} from "../MockBlocklockStringReceiver";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "blocklockContract",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "blocklock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IBlocklockSender",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createTimelockRequest",
    inputs: [
      {
        name: "decryptionBlockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "encryptedData",
        type: "tuple",
        internalType: "struct TypesLib.Ciphertext",
        components: [
          {
            name: "u",
            type: "tuple",
            internalType: "struct BLS.PointG2",
            components: [
              {
                name: "x",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
              {
                name: "y",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
            ],
          },
          {
            name: "v",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "w",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "encrytpedValue",
    inputs: [],
    outputs: [
      {
        name: "u",
        type: "tuple",
        internalType: "struct BLS.PointG2",
        components: [
          {
            name: "x",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
          {
            name: "y",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
        ],
      },
      {
        name: "v",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "w",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "plainTextValue",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "receiveBlocklock",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "decryptionKey",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161100438038061100483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610f71806100936000396000f3fe608060405234801561001057600080fd5b50600436106100715760003560e01c806393b9740a1161005057806393b9740a146100be57806397a9c2851461010357806398e5a5e71461011857600080fd5b80626d6cae14610076578063492eea42146100925780635d941802146100a9575b600080fd5b61007f60015481565b6040519081526020015b60405180910390f35b61009a61012b565b6040516100899392919061068c565b6100bc6100b73660046106dc565b6102ba565b005b6000546100de9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610089565b61010b6104b5565b6040516100899190610758565b61007f610126366004610772565b610543565b6040805160808101808352600292839183918201908390819081845b81548152602001906001019080831161014757505050918352505060408051808201918290526020909201919060028481019182845b81548152602001906001019080831161017d57505050505081525050908060040180546101a9906107c0565b80601f01602080910402602001604051908101604052809291908181526020018280546101d5906107c0565b80156102225780601f106101f757610100808354040283529160200191610222565b820191906000526020600020905b81548152906001019060200180831161020557829003601f168201915b505050505090806005018054610237906107c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610263906107c0565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050905083565b60005473ffffffffffffffffffffffffffffffffffffffff163314610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f6e6c792074696d656c6f636b20636f6e74726163742063616e2063616c6c2060448201527f746869732e00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60015483146103d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420726571756573742069640000000000000000000000000000604482015260640161035d565b6000546040517fc9bc18c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c9bc18c49061042c906002908690869060040161091a565b600060405180830381865afa158015610449573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261048f9190810190610a61565b8060200190518101906104a29190610a61565b6008906104af9082610b03565b50505050565b600880546104c2906107c0565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee906107c0565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b505050505081565b600080546040517f46cd2b4200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906346cd2b429061059c9086908690600401610c88565b6020604051808303816000875af11580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df9190610d18565b6001558160026105ef8282610eb1565b50506001549392505050565b8060005b60028110156104af5781518452602093840193909101906001016105ff565b60005b83811015610639578181015183820152602001610621565b50506000910152565b6000815180845261065a81602086016020860161061e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6106978185516105fb565b600060208501516106ab60408401826105fb565b5060c060808301526106c060c0830185610642565b82810360a08401526106d28185610642565b9695505050505050565b6000806000604084860312156106f157600080fd5b83359250602084013567ffffffffffffffff8082111561071057600080fd5b818601915086601f83011261072457600080fd5b81358181111561073357600080fd5b87602082850101111561074557600080fd5b6020830194508093505050509250925092565b60208152600061076b6020830184610642565b9392505050565b6000806040838503121561078557600080fd5b82359150602083013567ffffffffffffffff8111156107a357600080fd5b830160c081860312156107b557600080fd5b809150509250929050565b600181811c908216806107d457607f821691505b60208210810361080d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8060005b60028110156104af578154845260209093019260019182019101610817565b60008154610843816107c0565b8085526020600183811680156108605760018114610898576108c6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838901528284151560051b89010195506108c6565b866000528260002060005b858110156108be5781548a82018601529083019084016108a3565b890184019650505b505050505092915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6040815261092b6040820185610813565b61093b6080820160028601610813565b60c0808201526000610954610100830160048701610836565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08382030160e084015261098b8160058801610836565b905082810360208401526106d28185876108d1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156109ea576109ea6109a0565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610a3057610a306109a0565b81604052809350858152868686011115610a4957600080fd5b610a5786602083018761061e565b5050509392505050565b600060208284031215610a7357600080fd5b815167ffffffffffffffff811115610a8a57600080fd5b8201601f81018413610a9b57600080fd5b610aaa848251602084016109cf565b949350505050565b601f821115610afe576000816000526020600020601f850160051c81016020861015610adb5750805b601f850160051c820191505b81811015610afa57828155600101610ae7565b5050505b505050565b815167ffffffffffffffff811115610b1d57610b1d6109a0565b610b3181610b2b84546107c0565b84610ab2565b602080601f831160018114610b845760008415610b4e5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610afa565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610bd157888601518255948401946001909101908401610bb2565b5085821015610c0d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610c5257600080fd5b830160208101925035905067ffffffffffffffff811115610c7257600080fd5b803603821315610c8157600080fd5b9250929050565b828152604060208201526040826040830137604080830160808301376000610cb36080840184610c1d565b60c080850152610cc8610100850182846108d1565b915050610cd860a0850185610c1d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08584030160e0860152610d0d8382846108d1565b979650505050505050565b600060208284031215610d2a57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d6657600080fd5b83018035915067ffffffffffffffff821115610d8157600080fd5b602001915036819003821315610c8157600080fd5b67ffffffffffffffff831115610dae57610dae6109a0565b610dc283610dbc83546107c0565b83610ab2565b6000601f841160018114610e145760008515610dde5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610eaa565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015610e635786850135825560209485019460019092019101610e43565b5086821015610e9e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8160005b6002811015610ed257813583820155602090910190600101610eb5565b50506040820160005b6002808210610eea5750610f01565b823584830190910155602090910190600101610edb565b5050610f106080830183610d31565b610f1e818360048601610d96565b5050610f2d60a0830183610d31565b6104af818360058601610d9656fea26469706673582212200b88fa30982a2976f4ddc6e28544167a6db275b24d02be60327f32114c06dec464736f6c63430008180033";

type MockBlocklockStringReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBlocklockStringReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBlocklockStringReceiver__factory extends ContractFactory {
  constructor(...args: MockBlocklockStringReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    blocklockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(blocklockContract, overrides || {});
  }
  override deploy(
    blocklockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(blocklockContract, overrides || {}) as Promise<
      MockBlocklockStringReceiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockBlocklockStringReceiver__factory {
    return super.connect(runner) as MockBlocklockStringReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBlocklockStringReceiverInterface {
    return new Interface(_abi) as MockBlocklockStringReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockBlocklockStringReceiver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockBlocklockStringReceiver;
  }
}
