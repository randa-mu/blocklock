/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockBlocklockStringReceiver,
  MockBlocklockStringReceiverInterface,
} from "../MockBlocklockStringReceiver";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "blocklockContract",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "blocklock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IBlocklockSender",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createTimelockRequest",
    inputs: [
      {
        name: "decryptionBlockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "encryptedData",
        type: "tuple",
        internalType: "struct TypesLib.Ciphertext",
        components: [
          {
            name: "u",
            type: "tuple",
            internalType: "struct BLS.PointG2",
            components: [
              {
                name: "x",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
              {
                name: "y",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
            ],
          },
          {
            name: "v",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "w",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "encrytpedValue",
    inputs: [],
    outputs: [
      {
        name: "u",
        type: "tuple",
        internalType: "struct BLS.PointG2",
        components: [
          {
            name: "x",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
          {
            name: "y",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
        ],
      },
      {
        name: "v",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "w",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "plainTextValue",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "receiveBlocklock",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "decryptionKey",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50604051610fb0380380610fb083398101604081905261002e91610052565b5f80546001600160a01b0319166001600160a01b039290921691909117905561007f565b5f60208284031215610062575f80fd5b81516001600160a01b0381168114610078575f80fd5b9392505050565b610f248061008c5f395ff3fe608060405234801561000f575f80fd5b506004361061006e575f3560e01c806393b9740a1161004d57806393b9740a146100ba57806397a9c285146100fe57806398e5a5e714610113575f80fd5b80626d6cae14610072578063492eea421461008e5780635d941802146100a5575b5f80fd5b61007b60015481565b6040519081526020015b60405180910390f35b610096610126565b60405161008593929190610673565b6100b86100b33660046106c2565b6102b1565b005b5f546100d99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610085565b6101066104a6565b6040516100859190610737565b61007b610121366004610750565b610532565b6040805160808101808352600292839183918201908390819081845b81548152602001906001019080831161014257505050918352505060408051808201918290526020909201919060028481019182845b81548152602001906001019080831161017857505050505081525050908060040180546101a49061079a565b80601f01602080910402602001604051908101604052809291908181526020018280546101d09061079a565b801561021b5780601f106101f25761010080835404028352916020019161021b565b820191905f5260205f20905b8154815290600101906020018083116101fe57829003601f168201915b5050505050908060050180546102309061079a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c9061079a565b80156102a75780601f1061027e576101008083540402835291602001916102a7565b820191905f5260205f20905b81548152906001019060200180831161028a57829003601f168201915b5050505050905083565b5f5473ffffffffffffffffffffffffffffffffffffffff16331461035c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f6e6c792074696d656c6f636b20636f6e74726163742063616e2063616c6c2060448201527f746869732e00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60015483146103c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207265717565737420696400000000000000000000000000006044820152606401610353565b5f546040517fc9bc18c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c9bc18c49061042190600290869086906004016108eb565b5f60405180830381865afa15801561043b573d5f803e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104809190810190610a2d565b8060200190518101906104939190610a2d565b6008906104a09082610ac6565b50505050565b600880546104b39061079a565b80601f01602080910402602001604051908101604052809291908181526020018280546104df9061079a565b801561052a5780601f106105015761010080835404028352916020019161052a565b820191905f5260205f20905b81548152906001019060200180831161050d57829003601f168201915b505050505081565b5f80546040517f46cd2b4200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906346cd2b429061058a9086908690600401610c49565b6020604051808303815f875af11580156105a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ca9190610cd8565b6001558160026105da8282610e66565b50506001549392505050565b805f5b60028110156104a05781518452602093840193909101906001016105e9565b5f5b8381101561062257818101518382015260200161060a565b50505f910152565b5f8151808452610641816020860160208601610608565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b61067e8185516105e6565b5f602085015161069160408401826105e6565b5060c060808301526106a660c083018561062a565b82810360a08401526106b8818561062a565b9695505050505050565b5f805f604084860312156106d4575f80fd5b83359250602084013567ffffffffffffffff808211156106f2575f80fd5b818601915086601f830112610705575f80fd5b813581811115610713575f80fd5b876020828501011115610724575f80fd5b6020830194508093505050509250925092565b602081525f610749602083018461062a565b9392505050565b5f8060408385031215610761575f80fd5b82359150602083013567ffffffffffffffff81111561077e575f80fd5b830160c0818603121561078f575f80fd5b809150509250929050565b600181811c908216806107ae57607f821691505b6020821081036107e5577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b805f5b60028110156104a05781548452602090930192600191820191016107ee565b5f81546108198161079a565b808552602060018381168015610836576001811461086e57610899565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838901528284151560051b8901019550610899565b865f52825f205f5b858110156108915781548a8201860152908301908401610876565b890184019650505b505050505092915050565b81835281816020850137505f602082840101525f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526108fc60408201856107eb565b61090c60808201600286016107eb565b60c0808201525f61092461010083016004870161080d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08382030160e084015261095b816005880161080d565b905082810360208401526106b88185876108a4565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f67ffffffffffffffff808411156109b7576109b7610970565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156109fd576109fd610970565b81604052809350858152868686011115610a15575f80fd5b610a23866020830187610608565b5050509392505050565b5f60208284031215610a3d575f80fd5b815167ffffffffffffffff811115610a53575f80fd5b8201601f81018413610a63575f80fd5b610a728482516020840161099d565b949350505050565b601f821115610ac157805f5260205f20601f840160051c81016020851015610a9f5750805b601f840160051c820191505b81811015610abe575f8155600101610aab565b50505b505050565b815167ffffffffffffffff811115610ae057610ae0610970565b610af481610aee845461079a565b84610a7a565b602080601f831160018114610b46575f8415610b105750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610bda565b5f858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610b9257888601518255948401946001909101908401610b73565b5085821015610bce57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610c15575f80fd5b830160208101925035905067ffffffffffffffff811115610c34575f80fd5b803603821315610c42575f80fd5b9250929050565b828152604060208201526040826040830137604080830160808301375f610c736080840184610be2565b60c080850152610c88610100850182846108a4565b915050610c9860a0850185610be2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08584030160e0860152610ccd8382846108a4565b979650505050505050565b5f60208284031215610ce8575f80fd5b5051919050565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d22575f80fd5b83018035915067ffffffffffffffff821115610d3c575f80fd5b602001915036819003821315610c42575f80fd5b67ffffffffffffffff831115610d6857610d68610970565b610d7c83610d76835461079a565b83610a7a565b5f601f841160018114610dcc575f8515610d965750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610abe565b5f838152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08716915b82811015610e195786850135825560209485019460019092019101610df9565b5086821015610e54577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b815f5b6002811015610e8657813583820155602090910190600101610e69565b5050604082015f5b6002808210610e9d5750610eb4565b823584830190910155602090910190600101610e8e565b5050610ec36080830183610cef565b610ed1818360048601610d50565b5050610ee060a0830183610cef565b6104a0818360058601610d5056fea2646970667358221220449cdd1108a33804d4621676c1e3c10ace2d8a8eec6ad63318540c77b41562d164736f6c63430008180033";

type MockBlocklockStringReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBlocklockStringReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBlocklockStringReceiver__factory extends ContractFactory {
  constructor(...args: MockBlocklockStringReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    blocklockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(blocklockContract, overrides || {});
  }
  override deploy(
    blocklockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(blocklockContract, overrides || {}) as Promise<
      MockBlocklockStringReceiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockBlocklockStringReceiver__factory {
    return super.connect(runner) as MockBlocklockStringReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBlocklockStringReceiverInterface {
    return new Interface(_abi) as MockBlocklockStringReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockBlocklockStringReceiver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockBlocklockStringReceiver;
  }
}
