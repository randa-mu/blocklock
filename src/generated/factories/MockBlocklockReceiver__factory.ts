/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockBlocklockReceiver,
  MockBlocklockReceiverInterface,
} from "../MockBlocklockReceiver";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "timelockContract",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "Ciphertext",
    inputs: [],
    outputs: [
      {
        name: "u",
        type: "tuple",
        internalType: "struct BLS.PointG2",
        components: [
          {
            name: "x",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
          {
            name: "y",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
        ],
      },
      {
        name: "v",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "w",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createTimelockRequest",
    inputs: [
      {
        name: "decryptionBlockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "encryptedData",
        type: "tuple",
        internalType: "struct TypesLib.Ciphertext",
        components: [
          {
            name: "u",
            type: "tuple",
            internalType: "struct BLS.PointG2",
            components: [
              {
                name: "x",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
              {
                name: "y",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
            ],
          },
          {
            name: "v",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "w",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "plainText",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "receiveBlocklock",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "decryptionKey",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "timelock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IBlocklockSender",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5060405161098d38038061098d83398101604081905261002e91610053565b600880546001600160a01b0319166001600160a01b0392909216919091179055610080565b5f60208284031215610063575f80fd5b81516001600160a01b0381168114610079575f80fd5b9392505050565b6109008061008d5f395ff3fe608060405234801561000f575f80fd5b506004361061005f575f3560e01c80626d6cae146100635780635d9418021461007e5780638879765a1461009357806398e5a5e7146100aa578063d33219b4146100bd578063d8da5046146100e8575b5f80fd5b61006b5f5481565b6040519081526020015b60405180910390f35b61009161008c36600461043d565b6100f1565b005b61009b610234565b60405161007593929190610527565b61006b6100b8366004610576565b6103c0565b6008546100d0906001600160a01b031681565b6040516001600160a01b039091168152602001610075565b61006b60075481565b6008546001600160a01b0316331461015e5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c792074696d656c6f636b20636f6e74726163742063616e2063616c6c206044820152643a3434b99760d91b60648201526084015b60405180910390fd5b5f5483146101a35760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd081a5960721b6044820152606401610155565b60085460405163326f063160e21b81526001600160a01b039091169063c9bc18c4906101d890600190869086906004016106e1565b5f60405180830381865afa1580156101f2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610219919081019061075c565b80602001905181019061022c9190610804565b600755505050565b604080516080810180835260019283918391820190839060029082845b81548152602001906001019080831161025157505050918352505060408051808201918290526020909201919060028481019182845b81548152602001906001019080831161028757505050505081525050908060040180546102b3906105e2565b80601f01602080910402602001604051908101604052809291908181526020018280546102df906105e2565b801561032a5780601f106103015761010080835404028352916020019161032a565b820191905f5260205f20905b81548152906001019060200180831161030d57829003601f168201915b50505050509080600501805461033f906105e2565b80601f016020809104026020016040519081016040528092919081815260200182805461036b906105e2565b80156103b65780601f1061038d576101008083540402835291602001916103b6565b820191905f5260205f20905b81548152906001019060200180831161039957829003601f168201915b5050505050905083565b60085460405163236695a160e11b81525f916001600160a01b0316906346cd2b42906103f29086908690600401610864565b6020604051808303815f875af115801561040e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104329190610804565b5f8190559392505050565b5f805f6040848603121561044f575f80fd5b83359250602084013567ffffffffffffffff8082111561046d575f80fd5b818601915086601f830112610480575f80fd5b81358181111561048e575f80fd5b87602082850101111561049f575f80fd5b6020830194508093505050509250925092565b805f5b60028110156104d45781518452602093840193909101906001016104b5565b50505050565b5f5b838110156104f45781810151838201526020016104dc565b50505f910152565b5f81518084526105138160208601602086016104da565b601f01601f19169290920160200192915050565b6105328185516104b2565b5f602085015161054560408401826104b2565b5060c0608083015261055a60c08301856104fc565b82810360a084015261056c81856104fc565b9695505050505050565b5f8060408385031215610587575f80fd5b82359150602083013567ffffffffffffffff8111156105a4575f80fd5b830160c081860312156105b5575f80fd5b809150509250929050565b805f5b60028110156104d45781548452602090930192600191820191016105c3565b600181811c908216806105f657607f821691505b60208210810361061457634e487b7160e01b5f52602260045260245ffd5b50919050565b80545f90600181811c908083168061063357607f831692505b6020808410820361065257634e487b7160e01b5f52602260045260245ffd5b8388526020880182801561066d5760018114610683576106ac565b60ff198716825285151560051b820197506106ac565b5f898152602090205f5b878110156106a65781548482015290860190840161068d565b83019850505b5050505050505092915050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b604081526106f260408201856105c0565b61070260808201600286016105c0565b60c0808201525f61071a61010083016004870161061a565b828103603f190160e0840152610733816005880161061a565b9050828103602084015261056c8185876106b9565b634e487b7160e01b5f52604160045260245ffd5b5f6020828403121561076c575f80fd5b815167ffffffffffffffff80821115610783575f80fd5b818401915084601f830112610796575f80fd5b8151818111156107a8576107a8610748565b604051601f8201601f19908116603f011681019083821181831017156107d0576107d0610748565b816040528281528760208487010111156107e8575f80fd5b6107f98360208301602088016104da565b979650505050505050565b5f60208284031215610814575f80fd5b5051919050565b5f808335601e19843603018112610830575f80fd5b830160208101925035905067ffffffffffffffff81111561084f575f80fd5b80360382131561085d575f80fd5b9250929050565b828152604060208201526040826040830137604080830160808301375f61088e608084018461081b565b60c0808501526108a3610100850182846106b9565b9150506108b360a085018561081b565b848303603f190160e08601526107f98382846106b956fea2646970667358221220cfbb9e4f772d42fc1e1c202d552c1db10c082854e16c2b10864ccc2db6fc98ff64736f6c63430008180033";

type MockBlocklockReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBlocklockReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBlocklockReceiver__factory extends ContractFactory {
  constructor(...args: MockBlocklockReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    timelockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(timelockContract, overrides || {});
  }
  override deploy(
    timelockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(timelockContract, overrides || {}) as Promise<
      MockBlocklockReceiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockBlocklockReceiver__factory {
    return super.connect(runner) as MockBlocklockReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBlocklockReceiverInterface {
    return new Interface(_abi) as MockBlocklockReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockBlocklockReceiver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockBlocklockReceiver;
  }
}
