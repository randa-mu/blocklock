/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockBlocklockReceiver,
  MockBlocklockReceiverInterface,
} from "../MockBlocklockReceiver";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "blocklockContract",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "blocklock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IBlocklockSender",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createTimelockRequest",
    inputs: [
      {
        name: "decryptionBlockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "encryptedData",
        type: "tuple",
        internalType: "struct TypesLib.Ciphertext",
        components: [
          {
            name: "u",
            type: "tuple",
            internalType: "struct BLS.PointG2",
            components: [
              {
                name: "x",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
              {
                name: "y",
                type: "uint256[2]",
                internalType: "uint256[2]",
              },
            ],
          },
          {
            name: "v",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "w",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "encrytpedValue",
    inputs: [],
    outputs: [
      {
        name: "u",
        type: "tuple",
        internalType: "struct BLS.PointG2",
        components: [
          {
            name: "x",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
          {
            name: "y",
            type: "uint256[2]",
            internalType: "uint256[2]",
          },
        ],
      },
      {
        name: "v",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "w",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "plainTextValue",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "receiveBlocklock",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "decryptionKey",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50604051610dbc380380610dbc83398101604081905261002e91610052565b5f80546001600160a01b0319166001600160a01b039290921691909117905561007f565b5f60208284031215610062575f80fd5b81516001600160a01b0381168114610078575f80fd5b9392505050565b610d308061008c5f395ff3fe608060405234801561000f575f80fd5b506004361061006e575f3560e01c806393b9740a1161004d57806393b9740a146100ba57806397a9c285146100fe57806398e5a5e714610107575f80fd5b80626d6cae14610072578063492eea421461008e5780635d941802146100a5575b5f80fd5b61007b60015481565b6040519081526020015b60405180910390f35b61009661011a565b604051610085939291906105d6565b6100b86100b3366004610625565b6102a5565b005b5f546100d99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610085565b61007b60085481565b61007b61011536600461069a565b61048f565b6040805160808101808352600292839183918201908390819081845b81548152602001906001019080831161013657505050918352505060408051808201918290526020909201919060028481019182845b81548152602001906001019080831161016c5750505050508152505090806004018054610198906106e4565b80601f01602080910402602001604051908101604052809291908181526020018280546101c4906106e4565b801561020f5780601f106101e65761010080835404028352916020019161020f565b820191905f5260205f20905b8154815290600101906020018083116101f257829003601f168201915b505050505090806005018054610224906106e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610250906106e4565b801561029b5780601f106102725761010080835404028352916020019161029b565b820191905f5260205f20905b81548152906001019060200180831161027e57829003601f168201915b5050505050905083565b5f5473ffffffffffffffffffffffffffffffffffffffff163314610350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f6e6c792074696d656c6f636b20636f6e74726163742063616e2063616c6c2060448201527f746869732e00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60015483146103bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207265717565737420696400000000000000000000000000006044820152606401610347565b5f546040517fc9bc18c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c9bc18c4906104159060029086908690600401610835565b5f60405180830381865afa15801561042f573d5f803e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261047491908101906108e7565b80602001905181019061048791906109ad565b600855505050565b5f80546040517f46cd2b4200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906346cd2b42906104e79086908690600401610a2b565b6020604051808303815f875af1158015610503573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052791906109ad565b6001558160026105378282610c72565b50506001549392505050565b805f5b6002811015610565578151845260209384019390910190600101610546565b50505050565b5f5b8381101561058557818101518382015260200161056d565b50505f910152565b5f81518084526105a481602086016020860161056b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6105e1818551610543565b5f60208501516105f46040840182610543565b5060c0608083015261060960c083018561058d565b82810360a084015261061b818561058d565b9695505050505050565b5f805f60408486031215610637575f80fd5b83359250602084013567ffffffffffffffff80821115610655575f80fd5b818601915086601f830112610668575f80fd5b813581811115610676575f80fd5b876020828501011115610687575f80fd5b6020830194508093505050509250925092565b5f80604083850312156106ab575f80fd5b82359150602083013567ffffffffffffffff8111156106c8575f80fd5b830160c081860312156106d9575f80fd5b809150509250929050565b600181811c908216806106f857607f821691505b60208210810361072f577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b805f5b6002811015610565578154845260209093019260019182019101610738565b5f8154610763816106e4565b80855260206001838116801561078057600181146107b8576107e3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838901528284151560051b89010195506107e3565b865f52825f205f5b858110156107db5781548a82018601529083019084016107c0565b890184019650505b505050505092915050565b81835281816020850137505f602082840101525f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526108466040820185610735565b6108566080820160028601610735565b60c0808201525f61086e610100830160048701610757565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08382030160e08401526108a58160058801610757565b9050828103602084015261061b8185876107ee565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f602082840312156108f7575f80fd5b815167ffffffffffffffff8082111561090e575f80fd5b818401915084601f830112610921575f80fd5b815181811115610933576109336108ba565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610979576109796108ba565b81604052828152876020848701011115610991575f80fd5b6109a283602083016020880161056b565b979650505050505050565b5f602082840312156109bd575f80fd5b5051919050565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126109f7575f80fd5b830160208101925035905067ffffffffffffffff811115610a16575f80fd5b803603821315610a24575f80fd5b9250929050565b828152604060208201526040826040830137604080830160808301375f610a5560808401846109c4565b60c080850152610a6a610100850182846107ee565b915050610a7a60a08501856109c4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08584030160e08601526109a28382846107ee565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ae2575f80fd5b83018035915067ffffffffffffffff821115610afc575f80fd5b602001915036819003821315610a24575f80fd5b601f821115610b5757805f5260205f20601f840160051c81016020851015610b355750805b601f840160051c820191505b81811015610b54575f8155600101610b41565b50505b505050565b67ffffffffffffffff831115610b7457610b746108ba565b610b8883610b8283546106e4565b83610b10565b5f601f841160018114610bd8575f8515610ba25750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610b54565b5f838152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08716915b82811015610c255786850135825560209485019460019092019101610c05565b5086821015610c60577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b815f5b6002811015610c9257813583820155602090910190600101610c75565b5050604082015f5b6002808210610ca95750610cc0565b823584830190910155602090910190600101610c9a565b5050610ccf6080830183610aaf565b610cdd818360048601610b5c565b5050610cec60a0830183610aaf565b610565818360058601610b5c56fea26469706673582212205bcef832cca274e90585b9d2ed48e912e2752e9fff6eb19eaa5ba1ac8a3e0ca564736f6c63430008180033";

type MockBlocklockReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBlocklockReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBlocklockReceiver__factory extends ContractFactory {
  constructor(...args: MockBlocklockReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    blocklockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(blocklockContract, overrides || {});
  }
  override deploy(
    blocklockContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(blocklockContract, overrides || {}) as Promise<
      MockBlocklockReceiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockBlocklockReceiver__factory {
    return super.connect(runner) as MockBlocklockReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBlocklockReceiverInterface {
    return new Interface(_abi) as MockBlocklockReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockBlocklockReceiver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockBlocklockReceiver;
  }
}
